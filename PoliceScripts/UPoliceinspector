// This is the Configuration file for the UPoliceinspector Script


// Taser Config
Taser = 15101; // Taser ID
TaserTime = 5; // Sets the amount of time the player is Tased for

// Fine Config
FinePayout = True; // Sets if the player gets paid for the Fine

// Whois/CheckOwner Config
GroupName = True; // Sets if the player gets a group name when they do whois/checkowner (coming soon)
ObjectID = True; // Sets if the player gets a group name when they do whois/checkowner (coming soon)

// Police Calls Config
PoliceCall = true; // if true then will let the player call the police if has permission 

// Police Panic Button Config
PolicePanicButton = true; // if true then will force the police officer to use the panic button when dead

// Salary Config

HasToBeDuty = "false"; // set to true or false if you want it to be duty based (default isn't duty based)
salary = "true"; // set to true or false to enable or disable the salary system (default is true)
salaryEXP = "true"; // set to true or false if you want it to be EXP BASED (default is EXP BASED) (DONT SET TO FALSE IF YOU HAVEN'T CONTACTED OWNER FOR ANOTHER VERISON TO BE CHANGED TO YOUR Economy or whatever)
SalaryInterval = "1200"; // set to a number to set the interval in seconds (default is 20mins)
PoliceSalary = "1000"; // set to amount you want police to be paid (default is 1k)
SwatSalary = "2500"; // set to amount you want SWAT to be paid (default is 2.5k)

// This is the onload showing the script has been ran and is loaded

event onLoad(){
    server.log("------------------------------------------");
    server.log("-----[UPoliceinspector Script]------------");
    server.log("-------[Successfully Loaded]--------------");
    server.log("------[Made By: Midnight_Real]------------");
    server.log("----[Uscript By: Pluto Uscripts]----------");
    server.log("------------------------------------------");
}


// DO NOT TOUCH BELOW THIS LINE - IF YOU DON'T KNOW WHAT YOU ARE DOING
// THIS CAN BREAK THE SCRIPT AND IT WILL NOT WORK

// Door Script

command door(){
    permission = "UPI.door";
    execute(){       
        barricade = player.look.getBarricade();
        if(barricade != null) {
        if(barricade.door) {
            player.message("Target Door Found | Opening/Closing");
            barricade.door.toggle();
            return;
            }
        }
    }
}

// Salvage Script

command salvage(){
    permission = "UPI.salvage";
    execute(){       
        barricade = player.look.getBarricade();
        if(barricade != null) {
            barricade.destroy();
            player.message("Target Barricade Found | Picking Up");
            BID = barricade.id;
            player.inventory.addItem(BID);
            return;
        }
        else {
            player.message("No Target Found");
            return;
        }
    }
}

// Cuff Script

command cuff(targetPlayerName){
    permission = "UPI.cuff";
    execute(){
        target = toPlayer(targetPlayerName); 
        target.arrest();
        player.message(target.name + " Has Been Cuffed!");
    }
}

// Uncuff Script

command uncuff(targetPlayerName){
    permission = "UPI.cuff";
    execute(){
        target = toPlayer(targetPlayerName);
        target.release();
        player.message(target.name + " Has Been Uncuffed!");
    }
}

// Inspect Script

command inspect(){
    permission = "UPI.inspect";
    execute(){       
        barricade = player.look.getBarricade();
        if(barricade != null) {
        if(barricade.storage) {
            player.message("Target Storage Found | Storage Opened");
            barricade.storage.open(player);
            return;
            }
        }
    }
}

// Fine Script

command fine(target, amount, reason){
    permission =  "UPI.fine";
    execute(){
        if(arguments.count < 3){
            player.message("Proper Usage | /Fine <Player> <Fine> <Reason>");
            return;
        }
        target = toPlayer(target);
        if(target == null){
            player.message("Player not found!", "red");
            return;
        }
        else{
            amount = amount.toNumber();
            if(target.experience < amount){
                player.message(target.name + " does not have enough money to pay this fine!", "red");
            }
            else{
                target.experience = target.experience - amount;
                target.message(player.name + " has fined you! For:" + amount + " For the reason: " + reason, "red");
                if(FinePayout == true){
                    player.experience = player.experience + amount;
                    player.message(target.name + " has been fined! You have been paid:" + amount, "green");
                }
            }
        }
    }
}

// Vechicle Inspect Script (Testing Faze)

command vinspect(){
    permission = "UPI.vinspect";
    execute(){       
        vehicle = player.look.getVehicle();
        if(vehicle != null) {
        if(vehicle.storage) {
            player.message("Target Vechicle Storage Found | Vechicle Storage Opened");
            Vechicle.storage.open(player);
            return;
            }
        }
    }
}

// Slimjim Script

command slimjim(){
    permission = "UPI.slimjim";
    Alias = "sj";
    execute(){       
        vehicle = player.look.getVehicle();
        if(vehicle != null) {
        if(vehicle.isLocked != true) {
            player.message("Target Vechicle Found | Slimjim used Vechicle Unlocked");
            vehicle.isLocked = 0;
            return;
            }
        player.message("Target Vechicle Found | Slimjim not used due to it being Unlocked");
        }
    }
}

// Police Announcer Script (Testing Faze)

command PDAnnounce(type, targetPlayerName, targetRaidLocation, time){ 
  permission = "UPI.PDAnnounce";
  execute(){
        if(arguments.count < 4){
            player.message("Proper Usage | /PDAnnounce <type> <targetPlayerName> <targetRaidLocation> <time>");
            return;
        }
        if(arguments.count > 5){
            player.message("Proper Usage | /PDAnnounce <type> <targetPlayerName> <targetRaidLocation> <time>");
            return;
        }
        if(type =! "Raid" && type =! "Search"){
            player.message("Proper Usage | /PDAnnounce <type(Raid/Search)> <targetPlayerName> <targetRaidLocation> <time>");
            return;
        }
        targetPlayer = toPlayer(targetPlayerName);
        if(type == "Raid"){
            broadcast("<color=blue>[Police Raid] <color=blue> " + targetPlayer.name + " Has " + time + " Minutes till Police Begin a Raid Warrant On His Property In " + targetRaidLocation);
            targetRaidLocation = targetRaidLocation; // Stores Raid Location (useful later when i add timer (if i do))
            targetPlayer.name = targetPlayer.name; // Stores Player Name (useful later when i add timer (if i do))
            return;
        }
        if(type == "Search"){
            broadcast("<color=blue>[Police Search Warrant] <color=blue> " + targetPlayer.name + " Has " + time + " Minutes till Police Begin a Search Warrant On His Property In " + targetRaidLocation);
            targetRaidLocation = targetRaidLocation; // Stores Raid Location (useful later when i add timer (if i do))
            targetPlayer.name = targetPlayer.name; // Stores Player Name (useful later when i add timer (if i do))
            return;
        }
  }
}

// Taser Script (Testing Faze)

vSet = 0;

event onPlayerDamaged(victim, attacker, cancel, damage, cause, limb) {
        if(attacker.equipment.item.id == Taser && attacker.hasPermission = "UPI.Taser";) {
            vSet = 1;
            while (Vset == 1);
                event onVehicleEnter(vehicle, victim){
                    vehicle.removePlayer(victim)
                }
            victim.stance = "PRONE";
            victim.gesture = "SURRENDER_START";
            victim.speed = 0;
            victim.jumpAcceleration = 0;
            victim.gravity = 0;
            victim.message("<color=0080FF><b>[UPolice]</b><color=FFFFFF> You've been tasered.");
            attacker.message("<color=0080FF><b>[UPolice]</b><color=FFFFFF> You've tasered <color=0080FF><b>" + victim.name + "</b><color=FFFFFF> .");
            wait.seconds(TaserTime, Trelease, victim);
        }
}

function Trelease(victim)
{
   if (vSet = 1);{
        vSet = 0;
        victim.release();
        victim.speed = 1;
        victim.jumpAcceleration = 1;
        victim.gravity = 1;
   }
   else{
    victim.release();
    victim.speed = 1;
    victim.jumpAcceleration = 1;
    victim.gravity = 1; }
}


// 911/999 Script (Still needs testing)


command 911 (callText) {
    permission = "UPI.call" ; 
    Alias = "999";
    execute () {
        if (PoliceCall == True){
        callerlocation = player.position;
        if(arguments.count < 1){
            player.message("Proper Usage | /999 <text> or /911 <text>");
            return;
        }
        if(arguments.count > 2){
            player.message("Proper Usage | /999 <text> or /911 <text>");
            return;
        }
        foreach (player in server.players) {
            call = call;
            If (player.hasPermission("UPI.Officer")) {
                player.message ("We need officer to respond to this call");
                player.message ("call:  " + callText);
                player.message ("Position has been marked on your GPS");
                player.setMarker(callerlocation);
                }
            }
        }
        else{
            print("Police Line is dead");
        }
    }
}

event onPlayerDeath(victim, killer, cause){
    if(PolicePanicButton == true){
        if (victim.hasPermission("UPI.Officer")){
            painclocation = victim.position;
            foreach (player in server.players) {
                If (player.hasPermission("UPI.Officer")) {
                    player.message ("Officer Painc Button has been set off");
                    player.message ("Position has been marked on your GPS");
                    player.setMarker(painclocation);
                }
            }
        }
    }
}

// Duty Script
Duty = [];

command Duty (action) {
    permission = "UPI.duty" ; 
    Alias = "duty";
    execute() {
        if(arguments.count < 1){
            player.message("Proper Usage | /duty <action> or /Duty <action>");
            return;
        }
        if(arguments.count > 2){
            player.message("Proper Usage | /duty <action> or /Duty <action>");
            return;
        }
        if (action == "on"){
            duty.add(player.id)
            if(player.hasPermission("UPI.Duty.Police")){
                player.message("You are now Duty as a Police Officer");
            }
            if(player.hasPermission("UPI.Duty.Sheriff")){
                player.message("You are now Duty as a Sheriff");
            }
            if(player.hasPermission("UPI.Duty.Swat")){
                player.message("You are now Duty as a Swat");
            }
        }
        if (action == "off"){
            if (duty.contains(player.id)){
                duty.remove(player.id)
                player.message("You are no longer on Duty");
            }
            else{
                player.message("You are not on Duty");
            }
        }
        if (action != "off" && action != "on"){
            player.message("Proper Usage | /duty <action> or /Duty <action>")
            player.message("For examples: '/duty on' or '/duty off'")
        }
        else{ // error message
            player.message("Weird Mhm Why are you seeing this")
            player.message("Please contact Pluto Uscripts for support")
            server.log("Weird Mhm Why are you seeing this")
            server.log("Please contact Pluto Uscripts for support")
            return;
        }
    }
}

// Salary Script
event onPlayerJoined(player){
    if (salary == true){
        if(player.hasPermission("UPI.Salary.Police")){
            if(HasToBeDuty == true){
            while (player.hasPermission("UPI.Salary.Police") && Duty.contains(player.id)){
                player.message("You have been paid: " + PoliceSalary + "for the role:");
                player.message("Police Officer");
                if(salaryEXP == true){
                    salaryamount == PoliceSalary.toNumber();
                    player.experience += salaryamount;
                    }
                }
            }
            while (player.hasPermission("UPI.Salary.Police")){
                player.message("You have been paid: " + PoliceSalary + "for the role:");
                player.message("Police Officer");
                if(salaryEXP == true){
                    salaryamount == PoliceSalary.toNumber();
                    player.experience += salaryamount;
                    }
                }
        }
        if(player.hasPermission("UPI.Salary.Swat")){
        if(HasToBeDuty == true){
                if(player.hasPermission("UPI.Salary.Swat") && Duty.contains(player.id)){
                    while (player.hasPermission("UPI.Salary.Police")){
                        player.message("You have been paid: " + SwatSalary + "for the role:");
                        player.message("Swat");
                        if(salaryEXP == true){
                            salaryamount == SwatSalary.toNumber();
                            player.experience += salaryamount;
                        }
                    }
                }
            }
            while (player.hasPermission("UPI.Salary.Swat")){
            player.message("You have been paid: " + SwatSalary + "for the role:");
            player.message("Swat");
                if(salaryEXP == true){
                    salaryamount == SwatSalary.toNumber();
                    player.experience += salaryamount;
                    }
            }
        }
    }
}